// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArmDown.h"
#include "Commands/ArmDown1Tote.h"
#include "Commands/ArmToCanNormH.h"
#include "Commands/ArmToCanOn4_MaxH.h"
#include "Commands/ArmToNearistLevel.h"
#include "Commands/ArmToToteH.h"
#include "Commands/ArmToTote_StepH.h"
#include "Commands/ArmUp.h"
#include "Commands/ArmUp1Tote.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/ClawToHorizontal.h"
#include "Commands/ClawToVertical.h"
#include "Commands/Drive.h"
#include "Commands/MoveClawDown.h"
#include "Commands/MoveClawUp.h"


    // END AUTOGENERATED

OI::OI() {


	// Process operator interface input here.
        // BEGIN AUTOGENERATED

	stick = new Joystick(0);
	
	downArm = new JoystickButton(stick, RobotMap::downArm_Port);
			downArm->WhileHeld(new ArmDown());
	upArm = new JoystickButton(stick, RobotMap::upArm_Port);
			upArm->WhileHeld(new ArmUp());
	armDown1 = new JoystickButton(stick, RobotMap::otherButton_Ports);
			armDown1->WhenPressed(new ArmDown1Tote());
	armUp1 = new JoystickButton(stick, RobotMap::otherButton_Ports);
			armUp1->WhenPressed(new ArmUp1Tote());

	armRoundH = new JoystickButton(stick, RobotMap::otherButton_Ports);
			armRoundH->WhenPressed(new ArmToNearistLevel());

	armToCan = new JoystickButton(stick, RobotMap::otherButton_Ports);
			armToCan->WhenPressed(new ArmToCanNormH());
	maxUsefulH = new JoystickButton(stick, RobotMap::otherButton_Ports);
			maxUsefulH->WhenPressed(new ArmToCanOn4_MaxH());
	totePlusStepLevel = new JoystickButton(stick, RobotMap::otherButton_Ports);
			totePlusStepLevel->WhenPressed(new ArmToTote_StepH());
	toteLevel = new JoystickButton(stick, RobotMap::otherButton_Ports);
			toteLevel->WhenPressed(new ArmToToteH());

	clawUp = new JoystickButton(stick, RobotMap::clawUp_Port);
			clawUp->WhileHeld(new MoveClawUp());
	clawDown = new JoystickButton(stick, RobotMap::clawDown_Port);
			clawDown->WhileHeld(new MoveClawDown());
	clawOut = new JoystickButton(stick, RobotMap::clawOut_Port);
			clawOut->WhenPressed(new ClawToHorizontal());
	clawNeutral = new JoystickButton(stick, RobotMap::clawNeautral_Port);
			clawNeutral->WhenPressed(new ClawToVertical());


	resetGyro= new JoystickButton(stick, RobotMap::resetGyro_Port);
	gyroLess= new JoystickButton(stick, RobotMap::otherButton_Ports);

	turnR_Fast= new JoystickButton(stick, RobotMap::turnR_Fast_Port);
	turnR_Slow= new JoystickButton(stick, RobotMap::turnR_Slow_Port);
	turnL_Fast= new JoystickButton(stick, RobotMap::turnL_Fast_Port);
	turnL_Slow= new JoystickButton(stick, RobotMap::turnL_Slow_Port);

     

        // SmartDashboard Buttons
	SmartDashboard::PutData("ClawToVertical", new ClawToVertical());

	SmartDashboard::PutData("ClawToHorizontal", new ClawToHorizontal());

	SmartDashboard::PutData("MoveClawDown", new MoveClawDown());

	SmartDashboard::PutData("MoveClawUp", new MoveClawUp());

	SmartDashboard::PutData("ArmToToteH", new ArmToToteH());

	SmartDashboard::PutData("ArmToTote_StepH", new ArmToTote_StepH());

	SmartDashboard::PutData("ArmToCanOn4_MaxH", new ArmToCanOn4_MaxH());

	SmartDashboard::PutData("ArmUp1Tote", new ArmUp1Tote());

	SmartDashboard::PutData("ArmDown1Tote", new ArmDown1Tote());

	SmartDashboard::PutData("ArmToCanNormH", new ArmToCanNormH());

	SmartDashboard::PutData("ArmToNearistLevel", new ArmToNearistLevel());

	SmartDashboard::PutData("ArmUp", new ArmUp());

	SmartDashboard::PutData("ArmDown", new ArmDown());

	SmartDashboard::PutData("Drive", new Drive());

	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());


    // END AUTOGENERATED
}


float OI::deadbandKill(float init, float deadZone){
	if(std::abs(init)<deadZone){
		return 0;
	}else{
		return init;
	}
}

// BEGIN AUTOGENERATED

Joystick* OI::getstick() {
	return stick;
}


    // END AUTOGENERATED
